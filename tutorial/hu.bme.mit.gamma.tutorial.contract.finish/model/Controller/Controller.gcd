package controller
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
@TransitionPriority = order-based
statechart Controller [
	port PoliceInterrupt : requires PoliceInterrupt
	port SecondaryPolice : provides PoliceInterrupt
	port SecondaryControl : provides Control
	port PriorityControl : provides Control
	port PriorityPolice : provides PoliceInterrupt
] {
	timeout SecondaryPreparesTimeout2
	timeout InitTimeout3
	timeout PriorityPreparesTimeout4
	timeout SecondaryTimeout5
	timeout PriorityTimeout6
	transition from Entry0 to PriorityPrepares
	transition from Entry1 to Init
	transition from Init to Operating when timeout InitTimeout3
	transition from Interrupted to Operating when PoliceInterrupt.police / raise
		PriorityPolice.police; raise SecondaryPolice.police;
	transition from Operating to Interrupted when PoliceInterrupt.police / raise
		PriorityPolice.police; raise SecondaryPolice.police;
	transition from Priority to PriorityPrepares when timeout PriorityTimeout6
	transition from PriorityPrepares to Secondary when timeout PriorityPreparesTimeout4
	transition from Secondary to SecondaryPrepares when timeout SecondaryTimeout5
	transition from SecondaryPrepares to Priority when timeout SecondaryPreparesTimeout2
	region main_region {
		state Operating {
			region operating {
				initial Entry0
				state PriorityPrepares {
					entry / set PriorityPreparesTimeout4 := 1 s; raise PriorityControl.toggle;
				}
				state Secondary {
					entry / set SecondaryTimeout5 := 2 s; raise PriorityControl.toggle; raise
						SecondaryControl.toggle;
				}
				state SecondaryPrepares {
					entry / set SecondaryPreparesTimeout2 := 1 s; raise SecondaryControl.toggle;
				}
				state Priority {
					entry / set PriorityTimeout6 := 2 s; raise PriorityControl.toggle; raise
						SecondaryControl.toggle;
				}
			}
		}
		initial Entry1
		state Init {
			entry / set InitTimeout3 := 2 s; raise PriorityControl.toggle;
		}
		state Interrupted
	}
}