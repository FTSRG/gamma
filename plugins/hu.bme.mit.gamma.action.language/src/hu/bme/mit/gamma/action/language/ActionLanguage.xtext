/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.action.language.ActionLanguage with hu.bme.mit.gamma.constraint.language.ConstraintLanguage
//generate actionLanguage "http://www.bme.hu/mit/gamma/action/language/ActionLanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
//import "http://www.mit.bme.hu/gamma/action/Model"
import "platform:/resource/hu.bme.mit.gamma.action.model/model/action.ecore" as ActionModel
import "http://www.mit.bme.hu/gamma/constraint/Model" as ConstraintModel 

Action returns ActionModel::Action:
	Block | 
	Statement
;

@Override
FunctionDeclaration returns ConstraintModel::FunctionDeclaration:
	LambdaDeclaration | ProcedureDeclaration
;

ProcedureDeclaration returns ActionModel::ProcedureDeclaration:
	'procedure' name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? ':' type=Type
	body=Block
;

Block returns ActionModel::Block:
	{ActionModel::Block}
	'{' 
		(actions+=Action)*
	'}'
;

Statement returns ActionModel::Statement:
	InlineStatement | 
	MultilineStatement
;

InlineStatement returns ActionModel::Statement:
	(VariableDeclarationStatement |
	ConstantDeclarationStatement |
	
	ExpressionStatement |
	
	ReturnStatement |
	BreakStatement |
	
	AssignmentStatement 
	)
	
	';'
;

MultilineStatement returns ActionModel::Statement:
	IfStatement |
	SwitchStatement |
	ForStatement |
	
	ChoiceStatement
;

VariableDeclarationStatement returns ActionModel::VariableDeclarationStatement:
	variableDeclaration = VariableDeclaration
;

ConstantDeclarationStatement returns ActionModel::ConstantDeclarationStatement:
	constantDeclaration = ConstantDeclaration
;

ExpressionStatement returns ActionModel::ExpressionStatement:
	expression=Expression
;

IfBranch returns ActionModel::Branch:
	'(' guard=Expression ')'
	action=Action
;

ElseBranch returns ActionModel::Branch:
	guard=ElseExpression
	action=Action
;

SwitchBranch returns ActionModel::Branch:
	guard=Expression ':'
	action=Action
;

DefaultBranch returns ActionModel::Branch:
	guard=DefaultExpression ':'
	action=Action
;

ChoiceBranch returns ActionModel::Branch:
	'[' guard=Expression ']'
	action=Action
;

DefaultExpression returns ConstraintModel::ElseExpression:
	{ConstraintModel::ElseExpression} 'default'
;

IfStatement returns ActionModel::IfStatement:
	{ActionModel::IfStatement}
	'if' conditionals+=IfBranch
	(=> 'elsif' conditionals+=IfBranch)*
	(=> conditionals+=ElseBranch)?
;

SwitchStatement returns ActionModel::SwitchStatement:
	'switch' '(' controlExpression=Expression ')'
	'{'
	('case' cases+=SwitchBranch ('case' cases+=SwitchBranch)*)
	(cases+=DefaultBranch)?
	'}'
;

ForStatement returns ActionModel::ForStatement:
	'for' '(' parameter=ParameterDeclaration'in'range=Expression')'
	body=Block
	('then' then=Block)?
;

ReturnStatement returns ActionModel::ReturnStatement:
	'return' expression=Expression
;

BreakStatement returns ActionModel::BreakStatement:
	{ActionModel::BreakStatement}
	'break'
;

ChoiceStatement returns ActionModel::ChoiceStatement:
	'choice'
	'{'
	('branch' branches+=ChoiceBranch ('branch' branches+=ChoiceBranch)*)
	'}'
;

AssignmentStatement returns ActionModel::AssignmentStatement:
	lhs=ReferenceExpression ':=' rhs=Expression
;